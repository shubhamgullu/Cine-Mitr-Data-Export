# Docker Compose configuration for CineMitr Dashboard
# Includes services for the dashboard, Redis cache, and optional database

version: '3.8'

services:
  # Main dashboard application
  cinemitr-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: cinemitr-dashboard
    ports:
      - "${STREAMLIT_SERVER_PORT:-8501}:8501"
    environment:
      # Application configuration
      - APP_NAME=CineMitr Dashboard
      - APP_VERSION=1.0.0
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      
      # API configuration
      - API_BASE_URL=${API_BASE_URL:-http://localhost:8000/api/v1}
      - API_TIMEOUT=30
      - API_KEY=${API_KEY:-}
      
      # Security configuration
      - SECRET_KEY=${SECRET_KEY}
      - CSRF_ENABLED=true
      
      # Cache configuration
      - CACHE_TYPE=redis
      - REDIS_URL=redis://redis:6379/0
      
      # Feature flags
      - ENABLE_ANALYTICS=true
      - ENABLE_FILE_UPLOAD=true
      - ENABLE_EXPORT=true
      - ENABLE_IMPORT=true
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - cinemitr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: cinemitr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - cinemitr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: PostgreSQL database (uncomment if needed)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: cinemitr-postgres
  #   environment:
  #     - POSTGRES_DB=${POSTGRES_DB:-cinemitr}
  #     - POSTGRES_USER=${POSTGRES_USER:-cinemitr}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped
  #   networks:
  #     - cinemitr-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cinemitr}"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # Optional: Nginx reverse proxy (uncomment for production)
  # nginx:
  #   image: nginx:alpine
  #   container_name: cinemitr-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - cinemitr-dashboard
  #   restart: unless-stopped
  #   networks:
  #     - cinemitr-network

networks:
  cinemitr-network:
    driver: bridge
    name: cinemitr-network

volumes:
  redis_data:
    driver: local
    name: cinemitr_redis_data
  
  # Uncomment if using PostgreSQL
  # postgres_data:
  #   driver: local
  #   name: cinemitr_postgres_data